generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  active
  inactive
}

enum PeriodStatus {
  draft
  notStarted
  openForEnrollment
  inProgress
  finished
  canceled
}

enum DayOfWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum RoleValue {
  principal
  secretary
  coordinator
  educator
}

enum ShiftValue {
  morning
  afternoon
  evening
}

enum GradeItemType {
  sum
  average
}

model Discipline {
  guid                   String                  @id @default(uuid())
  status                 Status                  @default(active)
  name                   String                  @unique @db.VarChar(120)
  syllabus               String                  @db.VarChar(500)
  workload               Int
  weeklyClasses          Int                     @default(1) @map("weekly_classes")
  matrixModules          MatrixModule[]
  disciplineSchedules    DisciplineSchedule[]
  attendanceLogs         AttendanceLog[]
  disciplineGradeConfigs DisciplineGradeConfig[]
  studentGrades          StudentGrade[]
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")

  @@map("disciplines")
}

model Course {
  guid            String       @id @default(uuid())
  status          Status       @default(active)
  name            String       @unique @db.VarChar(120)
  minPassingGrade Float        @default(6.0)
  matrices        Matrix[]
  enrollments     Enrollment[]
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  @@map("courses")
}

model MatrixModule {
  guid        String       @id @default(uuid())
  name        String       @db.VarChar(120)
  disciplines Discipline[]
  Matrix      Matrix       @relation(fields: [matrixGuid], references: [guid])
  matrixGuid  String       @map("matrix_guid")
  Period      Period[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("matrix_modules")
}

model Matrix {
  guid          String         @id @default(uuid())
  status        Status         @default(active)
  name          String         @db.VarChar(120)
  matrixModules MatrixModule[]
  course        Course         @relation(fields: [courseGuid], references: [guid])
  courseGuid    String         @map("course_guid")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("matrices")
}

model Role {
  guid         String    @id @default(uuid())
  role         RoleValue
  Employee     Employee  @relation(fields: [employeeGuid], references: [guid])
  employeeGuid String    @map("employee_guid")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("roles")
}

model Address {
  guid         String    @id @default(uuid())
  cep          String    @db.VarChar(8)
  city         String    @db.VarChar(120)
  state        String    @db.VarChar(2)
  neighborhood String    @db.VarChar(120)
  street       String    @db.VarChar(120)
  number       String    @db.VarChar(10)
  employee     Employee?
  student      Student?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("addresses")
}

model Employee {
  guid                String               @id @default(uuid())
  status              Status               @default(active)
  roles               Role[]
  name                String               @db.VarChar(120)
  cpf                 String               @unique @db.VarChar(11)
  birthdate           DateTime
  phoneNumber         String               @map("phone_number") @db.VarChar(11)
  email               String               @unique @db.VarChar(256)
  password            String
  address             Address              @relation(fields: [addressGuid], references: [guid])
  addressGuid         String               @unique @map("address_guid")
  disciplinesSchedule DisciplineSchedule[]
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  @@map("employees")
}

model Student {
  guid            String           @id @default(uuid())
  status          Status           @default(active)
  name            String           @db.VarChar(120)
  cpf             String           @unique @db.VarChar(11)
  birthdate       DateTime
  phoneNumber     String           @map("phone_number") @db.VarChar(11)
  email           String           @unique @db.VarChar(256)
  password        String
  address         Address          @relation(fields: [addressGuid], references: [guid])
  addressGuid     String           @unique @map("address_guid")
  enrollments     Enrollment[]
  studentAbsences StudentAbsence[]
  studentGrades   StudentGrade[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("students")
}

model Classroom {
  guid                String               @id @default(uuid())
  status              Status               @default(active)
  name                String               @unique @db.VarChar(120)
  capacity            Int
  periods             Period[]
  disciplinesSchedule DisciplineSchedule[]
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  @@map("classrooms")
}

model Shift {
  guid           String          @id @default(uuid())
  status         Status          @default(active)
  shift          ShiftValue
  ClassSchedules ClassSchedule[]
  periods        Period[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("shifts")
}

model ClassSchedule {
  guid                String               @id @default(uuid())
  status              Status               @default(active)
  classNumber         Int                  @map("class_number")
  dayOfWeek           DayOfWeek            @map("day_of_week")
  shift               Shift                @relation(fields: [shiftGuid], references: [guid])
  shiftGuid           String               @map("shift_guid")
  startTime           DateTime             @map("start_time") @db.Time()
  endTime             DateTime             @map("end_time") @db.Time()
  disciplinesSchedule DisciplineSchedule[]
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  @@map("class_schedules")
}

model DisciplineSchedule {
  guid           String          @id @default(uuid())
  educator       Employee        @relation(fields: [employeeGuid], references: [guid])
  employeeGuid   String          @map("employee_guid")
  period         Period          @relation(fields: [periodGuid], references: [guid])
  periodGuid     String          @map("period_guid")
  Discipline     Discipline      @relation(fields: [disciplineGuid], references: [guid])
  disciplineGuid String          @map("discipline_guid")
  Classroom      Classroom       @relation(fields: [classroomGuid], references: [guid])
  classroomGuid  String          @map("classroom_guid")
  schedules      ClassSchedule[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("discipline_schedules")
}

model Enrollment {
  guid             String   @id @default(uuid())
  enrollmentNumber String   @unique @map("enrollment_number") @db.VarChar(10)
  course           Course   @relation(fields: [courseGuid], references: [guid])
  courseGuid       String   @map("course_guid")
  student          Student  @relation(fields: [studentGuid], references: [guid])
  studentGuid      String   @map("student_guid")
  period           Period?  @relation(fields: [periodGuid], references: [guid])
  periodGuid       String?  @map("period_guid")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("enrollments")
}

model Period {
  guid                   String                  @id @default(uuid())
  status                 PeriodStatus            @default(notStarted)
  enrollmentStartDate    DateTime?               @map("enrollment_start_date")
  enrollmentEndDate      DateTime?               @map("enrollment_end_date")
  deadline               DateTime?
  vacancies              Int?
  matrixModule           MatrixModule            @relation(fields: [matrixModuleGuid], references: [guid])
  matrixModuleGuid       String                  @map("matrix_module_guid")
  classId                String?                 @map("class_id")
  classroom              Classroom?              @relation(fields: [classroomGuid], references: [guid])
  classroomGuid          String?                 @map("classroom_guid")
  shift                  Shift?                  @relation(fields: [shiftGuid], references: [guid])
  shiftGuid              String?                 @map("shift_guid")
  disciplinesSchedule    DisciplineSchedule[]
  enrollments            Enrollment[]
  attendanceLogs         AttendanceLog[]
  disciplineGradeConfigs DisciplineGradeConfig[]
  studentGrades          StudentGrade[]
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")

  @@map("periods")
}

model StudentAbsence {
  guid              String         @id @default(uuid())
  totalPresences    Int            @default(0) @map("total_presences")
  totalAbsences     Int            @map("total_absences")
  student           Student        @relation(fields: [studentGuid], references: [guid])
  studentGuid       String         @map("student_guid")
  attendanceLog     AttendanceLog? @relation(fields: [attendanceLogGuid], references: [guid])
  attendanceLogGuid String?        @map("attendance_log_guid")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  @@map("student_absences")
}

model AttendanceLog {
  guid            String           @id @default(uuid())
  classDate       DateTime         @map("class_date")
  classSummary    String           @default("") @map("class_summary") @db.VarChar(1024)
  totalClasses    Int              @map("total_classes")
  period          Period           @relation(fields: [periodGuid], references: [guid])
  periodGuid      String           @map("period_guid")
  discipline      Discipline       @relation(fields: [disciplineGuid], references: [guid])
  disciplineGuid  String           @map("discipline_guid")
  studentAbsences StudentAbsence[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("attendance_logs")
}

model GradeItem {
  guid                      String                @id @default(uuid())
  type                      GradeItemType
  name                      String                @db.VarChar(120)
  maxValue                  Float                 @map("max_value")
  disciplineGradeConfig     DisciplineGradeConfig @relation(fields: [disciplineGradeConfigGuid], references: [guid])
  disciplineGradeConfigGuid String                @map("discipline_grade_config_guid")
  studentGradeItems         StudentGradeItem[]
  createdAt                 DateTime              @default(now()) @map("created_at")
  updatedAt                 DateTime              @updatedAt @map("updated_at")

  @@map("grade_items")
}

model DisciplineGradeConfig {
  guid           String      @id @default(uuid())
  period         Period      @relation(fields: [periodGuid], references: [guid])
  periodGuid     String      @map("period_guid")
  discipline     Discipline  @relation(fields: [disciplineGuid], references: [guid])
  disciplineGuid String      @map("discipline_guid")
  gradeItems     GradeItem[]
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  @@map("discipline_grade_configs")
}

model StudentGradeItem {
  guid             String       @id @default(uuid())
  value            Float
  gradeItem        GradeItem    @relation(fields: [gradeItemGuid], references: [guid])
  gradeItemGuid    String       @map("grade_item_guid")
  studentGrade     StudentGrade @relation(fields: [studentGradeGuid], references: [guid])
  studentGradeGuid String       @map("student_grade_guid")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  @@map("student_grade_items")
}

model StudentGrade {
  guid              String             @id @default(uuid())
  finalValue        Float              @map("final_value")
  student           Student            @relation(fields: [studentGuid], references: [guid])
  studentGuid       String             @map("student_guid")
  discipline        Discipline         @relation(fields: [disciplineGuid], references: [guid])
  disciplineGuid    String             @map("discipline_guid")
  period            Period             @relation(fields: [periodGuid], references: [guid])
  periodGuid        String             @map("period_guid")
  studentGradeItems StudentGradeItem[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("student_grades")
}
